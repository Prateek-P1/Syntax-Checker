Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement
Rule 2     program -> program statement
Rule 3     statement -> declaration
Rule 4     statement -> assignment
Rule 5     statement -> if_statement
Rule 6     statement -> while_statement
Rule 7     statement -> for_statement
Rule 8     statement -> print_statement
Rule 9     declaration -> type declaration_list SEMICOLON
Rule 10    declaration_list -> ID
Rule 11    declaration_list -> ID COMMA declaration_list
Rule 12    type -> INT
Rule 13    type -> FLOAT
Rule 14    assignment -> ID EQUALS expression SEMICOLON
Rule 15    if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE
Rule 16    if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
Rule 17    while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE
Rule 18    for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
Rule 19    print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON
Rule 20    print_list -> expression
Rule 21    print_list -> expression COMMA print_list
Rule 22    condition -> expression GT expression
Rule 23    condition -> expression LT expression
Rule 24    condition -> expression GE expression
Rule 25    condition -> expression LE expression
Rule 26    condition -> expression EQ expression
Rule 27    condition -> expression NE expression
Rule 28    expression -> term
Rule 29    expression -> expression PLUS term
Rule 30    expression -> expression MINUS term
Rule 31    term -> factor
Rule 32    term -> term TIMES factor
Rule 33    term -> term DIVIDE factor
Rule 34    factor -> NUMBER
Rule 35    factor -> ID
Rule 36    factor -> LPAREN expression RPAREN

Terminals, with rules where they appear

COMMA                : 11 21
DIVIDE               : 33
ELSE                 : 16
EQ                   : 26
EQUALS               : 14 18
FLOAT                : 13
FOR                  : 18
GE                   : 24
GT                   : 22
ID                   : 10 11 14 18 35
IF                   : 15 16
INT                  : 12
LBRACE               : 15 16 16 17 18
LE                   : 25
LPAREN               : 15 16 17 18 19 36
LT                   : 23
MINUS                : 30
NE                   : 27
NUMBER               : 34
PLUS                 : 29
PRINT                : 19
RBRACE               : 15 16 16 17 18
RPAREN               : 15 16 17 18 19 36
SEMICOLON            : 9 14 18 19
TIMES                : 32
WHILE                : 17
error                : 

Nonterminals, with rules where they appear

assignment           : 4 18
condition            : 15 16 17 18
declaration          : 3
declaration_list     : 9 11
expression           : 14 18 20 21 22 22 23 23 24 24 25 25 26 26 27 27 29 30 36
factor               : 31 32 33
for_statement        : 7
if_statement         : 5
print_list           : 19 21
print_statement      : 8
program              : 2 15 16 16 17 18 0
statement            : 1 2
term                 : 28 29 30 32 33
type                 : 9
while_statement      : 6

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    program                        shift and go to state 1
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 1

    (0) S' -> program .
    (2) program -> program . statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    statement                      shift and go to state 17
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 2

    (1) program -> statement .

    ID              reduce using rule 1 (program -> statement .)
    IF              reduce using rule 1 (program -> statement .)
    WHILE           reduce using rule 1 (program -> statement .)
    FOR             reduce using rule 1 (program -> statement .)
    PRINT           reduce using rule 1 (program -> statement .)
    INT             reduce using rule 1 (program -> statement .)
    FLOAT           reduce using rule 1 (program -> statement .)
    $end            reduce using rule 1 (program -> statement .)
    RBRACE          reduce using rule 1 (program -> statement .)


state 3

    (3) statement -> declaration .

    ID              reduce using rule 3 (statement -> declaration .)
    IF              reduce using rule 3 (statement -> declaration .)
    WHILE           reduce using rule 3 (statement -> declaration .)
    FOR             reduce using rule 3 (statement -> declaration .)
    PRINT           reduce using rule 3 (statement -> declaration .)
    INT             reduce using rule 3 (statement -> declaration .)
    FLOAT           reduce using rule 3 (statement -> declaration .)
    $end            reduce using rule 3 (statement -> declaration .)
    RBRACE          reduce using rule 3 (statement -> declaration .)


state 4

    (4) statement -> assignment .

    ID              reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    FOR             reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    INT             reduce using rule 4 (statement -> assignment .)
    FLOAT           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    RBRACE          reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> if_statement .

    ID              reduce using rule 5 (statement -> if_statement .)
    IF              reduce using rule 5 (statement -> if_statement .)
    WHILE           reduce using rule 5 (statement -> if_statement .)
    FOR             reduce using rule 5 (statement -> if_statement .)
    PRINT           reduce using rule 5 (statement -> if_statement .)
    INT             reduce using rule 5 (statement -> if_statement .)
    FLOAT           reduce using rule 5 (statement -> if_statement .)
    $end            reduce using rule 5 (statement -> if_statement .)
    RBRACE          reduce using rule 5 (statement -> if_statement .)


state 6

    (6) statement -> while_statement .

    ID              reduce using rule 6 (statement -> while_statement .)
    IF              reduce using rule 6 (statement -> while_statement .)
    WHILE           reduce using rule 6 (statement -> while_statement .)
    FOR             reduce using rule 6 (statement -> while_statement .)
    PRINT           reduce using rule 6 (statement -> while_statement .)
    INT             reduce using rule 6 (statement -> while_statement .)
    FLOAT           reduce using rule 6 (statement -> while_statement .)
    $end            reduce using rule 6 (statement -> while_statement .)
    RBRACE          reduce using rule 6 (statement -> while_statement .)


state 7

    (7) statement -> for_statement .

    ID              reduce using rule 7 (statement -> for_statement .)
    IF              reduce using rule 7 (statement -> for_statement .)
    WHILE           reduce using rule 7 (statement -> for_statement .)
    FOR             reduce using rule 7 (statement -> for_statement .)
    PRINT           reduce using rule 7 (statement -> for_statement .)
    INT             reduce using rule 7 (statement -> for_statement .)
    FLOAT           reduce using rule 7 (statement -> for_statement .)
    $end            reduce using rule 7 (statement -> for_statement .)
    RBRACE          reduce using rule 7 (statement -> for_statement .)


state 8

    (8) statement -> print_statement .

    ID              reduce using rule 8 (statement -> print_statement .)
    IF              reduce using rule 8 (statement -> print_statement .)
    WHILE           reduce using rule 8 (statement -> print_statement .)
    FOR             reduce using rule 8 (statement -> print_statement .)
    PRINT           reduce using rule 8 (statement -> print_statement .)
    INT             reduce using rule 8 (statement -> print_statement .)
    FLOAT           reduce using rule 8 (statement -> print_statement .)
    $end            reduce using rule 8 (statement -> print_statement .)
    RBRACE          reduce using rule 8 (statement -> print_statement .)


state 9

    (9) declaration -> type . declaration_list SEMICOLON
    (10) declaration_list -> . ID
    (11) declaration_list -> . ID COMMA declaration_list

    ID              shift and go to state 19

    declaration_list               shift and go to state 18

state 10

    (14) assignment -> ID . EQUALS expression SEMICOLON

    EQUALS          shift and go to state 20


state 11

    (15) if_statement -> IF . LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> IF . LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE

    LPAREN          shift and go to state 21


state 12

    (17) while_statement -> WHILE . LPAREN condition RPAREN LBRACE program RBRACE

    LPAREN          shift and go to state 22


state 13

    (18) for_statement -> FOR . LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE

    LPAREN          shift and go to state 23


state 14

    (19) print_statement -> PRINT . LPAREN print_list RPAREN SEMICOLON

    LPAREN          shift and go to state 24


state 15

    (12) type -> INT .

    ID              reduce using rule 12 (type -> INT .)


state 16

    (13) type -> FLOAT .

    ID              reduce using rule 13 (type -> FLOAT .)


state 17

    (2) program -> program statement .

    ID              reduce using rule 2 (program -> program statement .)
    IF              reduce using rule 2 (program -> program statement .)
    WHILE           reduce using rule 2 (program -> program statement .)
    FOR             reduce using rule 2 (program -> program statement .)
    PRINT           reduce using rule 2 (program -> program statement .)
    INT             reduce using rule 2 (program -> program statement .)
    FLOAT           reduce using rule 2 (program -> program statement .)
    $end            reduce using rule 2 (program -> program statement .)
    RBRACE          reduce using rule 2 (program -> program statement .)


state 18

    (9) declaration -> type declaration_list . SEMICOLON

    SEMICOLON       shift and go to state 25


state 19

    (10) declaration_list -> ID .
    (11) declaration_list -> ID . COMMA declaration_list

    SEMICOLON       reduce using rule 10 (declaration_list -> ID .)
    COMMA           shift and go to state 26


state 20

    (14) assignment -> ID EQUALS . expression SEMICOLON
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 28
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 21

    (15) if_statement -> IF LPAREN . condition RPAREN LBRACE program RBRACE
    (16) if_statement -> IF LPAREN . condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (22) condition -> . expression GT expression
    (23) condition -> . expression LT expression
    (24) condition -> . expression GE expression
    (25) condition -> . expression LE expression
    (26) condition -> . expression EQ expression
    (27) condition -> . expression NE expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    condition                      shift and go to state 33
    expression                     shift and go to state 34
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 22

    (17) while_statement -> WHILE LPAREN . condition RPAREN LBRACE program RBRACE
    (22) condition -> . expression GT expression
    (23) condition -> . expression LT expression
    (24) condition -> . expression GE expression
    (25) condition -> . expression LE expression
    (26) condition -> . expression EQ expression
    (27) condition -> . expression NE expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    condition                      shift and go to state 35
    expression                     shift and go to state 34
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 23

    (18) for_statement -> FOR LPAREN . assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (14) assignment -> . ID EQUALS expression SEMICOLON

    ID              shift and go to state 10

    assignment                     shift and go to state 36

state 24

    (19) print_statement -> PRINT LPAREN . print_list RPAREN SEMICOLON
    (20) print_list -> . expression
    (21) print_list -> . expression COMMA print_list
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    print_list                     shift and go to state 37
    expression                     shift and go to state 38
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 25

    (9) declaration -> type declaration_list SEMICOLON .

    ID              reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    IF              reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    WHILE           reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    FOR             reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    PRINT           reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    INT             reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    FLOAT           reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    $end            reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)
    RBRACE          reduce using rule 9 (declaration -> type declaration_list SEMICOLON .)


state 26

    (11) declaration_list -> ID COMMA . declaration_list
    (10) declaration_list -> . ID
    (11) declaration_list -> . ID COMMA declaration_list

    ID              shift and go to state 19

    declaration_list               shift and go to state 39

state 27

    (35) factor -> ID .

    TIMES           reduce using rule 35 (factor -> ID .)
    DIVIDE          reduce using rule 35 (factor -> ID .)
    SEMICOLON       reduce using rule 35 (factor -> ID .)
    PLUS            reduce using rule 35 (factor -> ID .)
    MINUS           reduce using rule 35 (factor -> ID .)
    GT              reduce using rule 35 (factor -> ID .)
    LT              reduce using rule 35 (factor -> ID .)
    GE              reduce using rule 35 (factor -> ID .)
    LE              reduce using rule 35 (factor -> ID .)
    EQ              reduce using rule 35 (factor -> ID .)
    NE              reduce using rule 35 (factor -> ID .)
    COMMA           reduce using rule 35 (factor -> ID .)
    RPAREN          reduce using rule 35 (factor -> ID .)


state 28

    (14) assignment -> ID EQUALS expression . SEMICOLON
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    SEMICOLON       shift and go to state 40
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 29

    (28) expression -> term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 28 (expression -> term .)
    PLUS            reduce using rule 28 (expression -> term .)
    MINUS           reduce using rule 28 (expression -> term .)
    GT              reduce using rule 28 (expression -> term .)
    LT              reduce using rule 28 (expression -> term .)
    GE              reduce using rule 28 (expression -> term .)
    LE              reduce using rule 28 (expression -> term .)
    EQ              reduce using rule 28 (expression -> term .)
    NE              reduce using rule 28 (expression -> term .)
    COMMA           reduce using rule 28 (expression -> term .)
    RPAREN          reduce using rule 28 (expression -> term .)
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 30

    (31) term -> factor .

    TIMES           reduce using rule 31 (term -> factor .)
    DIVIDE          reduce using rule 31 (term -> factor .)
    SEMICOLON       reduce using rule 31 (term -> factor .)
    PLUS            reduce using rule 31 (term -> factor .)
    MINUS           reduce using rule 31 (term -> factor .)
    GT              reduce using rule 31 (term -> factor .)
    LT              reduce using rule 31 (term -> factor .)
    GE              reduce using rule 31 (term -> factor .)
    LE              reduce using rule 31 (term -> factor .)
    EQ              reduce using rule 31 (term -> factor .)
    NE              reduce using rule 31 (term -> factor .)
    COMMA           reduce using rule 31 (term -> factor .)
    RPAREN          reduce using rule 31 (term -> factor .)


state 31

    (34) factor -> NUMBER .

    TIMES           reduce using rule 34 (factor -> NUMBER .)
    DIVIDE          reduce using rule 34 (factor -> NUMBER .)
    SEMICOLON       reduce using rule 34 (factor -> NUMBER .)
    PLUS            reduce using rule 34 (factor -> NUMBER .)
    MINUS           reduce using rule 34 (factor -> NUMBER .)
    GT              reduce using rule 34 (factor -> NUMBER .)
    LT              reduce using rule 34 (factor -> NUMBER .)
    GE              reduce using rule 34 (factor -> NUMBER .)
    LE              reduce using rule 34 (factor -> NUMBER .)
    EQ              reduce using rule 34 (factor -> NUMBER .)
    NE              reduce using rule 34 (factor -> NUMBER .)
    COMMA           reduce using rule 34 (factor -> NUMBER .)
    RPAREN          reduce using rule 34 (factor -> NUMBER .)


state 32

    (36) factor -> LPAREN . expression RPAREN
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 45
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 33

    (15) if_statement -> IF LPAREN condition . RPAREN LBRACE program RBRACE
    (16) if_statement -> IF LPAREN condition . RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE

    RPAREN          shift and go to state 46


state 34

    (22) condition -> expression . GT expression
    (23) condition -> expression . LT expression
    (24) condition -> expression . GE expression
    (25) condition -> expression . LE expression
    (26) condition -> expression . EQ expression
    (27) condition -> expression . NE expression
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    GT              shift and go to state 47
    LT              shift and go to state 48
    GE              shift and go to state 49
    LE              shift and go to state 50
    EQ              shift and go to state 51
    NE              shift and go to state 52
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 35

    (17) while_statement -> WHILE LPAREN condition . RPAREN LBRACE program RBRACE

    RPAREN          shift and go to state 53


state 36

    (18) for_statement -> FOR LPAREN assignment . condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (22) condition -> . expression GT expression
    (23) condition -> . expression LT expression
    (24) condition -> . expression GE expression
    (25) condition -> . expression LE expression
    (26) condition -> . expression EQ expression
    (27) condition -> . expression NE expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    condition                      shift and go to state 54
    expression                     shift and go to state 34
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 37

    (19) print_statement -> PRINT LPAREN print_list . RPAREN SEMICOLON

    RPAREN          shift and go to state 55


state 38

    (20) print_list -> expression .
    (21) print_list -> expression . COMMA print_list
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 20 (print_list -> expression .)
    COMMA           shift and go to state 56
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 39

    (11) declaration_list -> ID COMMA declaration_list .

    SEMICOLON       reduce using rule 11 (declaration_list -> ID COMMA declaration_list .)


state 40

    (14) assignment -> ID EQUALS expression SEMICOLON .

    ID              reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    IF              reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    WHILE           reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    FOR             reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    PRINT           reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    INT             reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    FLOAT           reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    $end            reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    NUMBER          reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    LPAREN          reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)
    RBRACE          reduce using rule 14 (assignment -> ID EQUALS expression SEMICOLON .)


state 41

    (29) expression -> expression PLUS . term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    term                           shift and go to state 57
    factor                         shift and go to state 30

state 42

    (30) expression -> expression MINUS . term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    term                           shift and go to state 58
    factor                         shift and go to state 30

state 43

    (32) term -> term TIMES . factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    factor                         shift and go to state 59

state 44

    (33) term -> term DIVIDE . factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    factor                         shift and go to state 60

state 45

    (36) factor -> LPAREN expression . RPAREN
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          shift and go to state 61
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 46

    (15) if_statement -> IF LPAREN condition RPAREN . LBRACE program RBRACE
    (16) if_statement -> IF LPAREN condition RPAREN . LBRACE program RBRACE ELSE LBRACE program RBRACE

    LBRACE          shift and go to state 62


state 47

    (22) condition -> expression GT . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 63
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 48

    (23) condition -> expression LT . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 64
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 49

    (24) condition -> expression GE . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 65
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 50

    (25) condition -> expression LE . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 66
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 51

    (26) condition -> expression EQ . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 67
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 52

    (27) condition -> expression NE . expression
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 68
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 53

    (17) while_statement -> WHILE LPAREN condition RPAREN . LBRACE program RBRACE

    LBRACE          shift and go to state 69


state 54

    (18) for_statement -> FOR LPAREN assignment condition . SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE

    SEMICOLON       shift and go to state 70


state 55

    (19) print_statement -> PRINT LPAREN print_list RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 71


state 56

    (21) print_list -> expression COMMA . print_list
    (20) print_list -> . expression
    (21) print_list -> . expression COMMA print_list
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 38
    print_list                     shift and go to state 72
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 57

    (29) expression -> expression PLUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 29 (expression -> expression PLUS term .)
    PLUS            reduce using rule 29 (expression -> expression PLUS term .)
    MINUS           reduce using rule 29 (expression -> expression PLUS term .)
    GT              reduce using rule 29 (expression -> expression PLUS term .)
    LT              reduce using rule 29 (expression -> expression PLUS term .)
    GE              reduce using rule 29 (expression -> expression PLUS term .)
    LE              reduce using rule 29 (expression -> expression PLUS term .)
    EQ              reduce using rule 29 (expression -> expression PLUS term .)
    NE              reduce using rule 29 (expression -> expression PLUS term .)
    COMMA           reduce using rule 29 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 29 (expression -> expression PLUS term .)
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 58

    (30) expression -> expression MINUS term .
    (32) term -> term . TIMES factor
    (33) term -> term . DIVIDE factor

    SEMICOLON       reduce using rule 30 (expression -> expression MINUS term .)
    PLUS            reduce using rule 30 (expression -> expression MINUS term .)
    MINUS           reduce using rule 30 (expression -> expression MINUS term .)
    GT              reduce using rule 30 (expression -> expression MINUS term .)
    LT              reduce using rule 30 (expression -> expression MINUS term .)
    GE              reduce using rule 30 (expression -> expression MINUS term .)
    LE              reduce using rule 30 (expression -> expression MINUS term .)
    EQ              reduce using rule 30 (expression -> expression MINUS term .)
    NE              reduce using rule 30 (expression -> expression MINUS term .)
    COMMA           reduce using rule 30 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 30 (expression -> expression MINUS term .)
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44


state 59

    (32) term -> term TIMES factor .

    TIMES           reduce using rule 32 (term -> term TIMES factor .)
    DIVIDE          reduce using rule 32 (term -> term TIMES factor .)
    SEMICOLON       reduce using rule 32 (term -> term TIMES factor .)
    PLUS            reduce using rule 32 (term -> term TIMES factor .)
    MINUS           reduce using rule 32 (term -> term TIMES factor .)
    GT              reduce using rule 32 (term -> term TIMES factor .)
    LT              reduce using rule 32 (term -> term TIMES factor .)
    GE              reduce using rule 32 (term -> term TIMES factor .)
    LE              reduce using rule 32 (term -> term TIMES factor .)
    EQ              reduce using rule 32 (term -> term TIMES factor .)
    NE              reduce using rule 32 (term -> term TIMES factor .)
    COMMA           reduce using rule 32 (term -> term TIMES factor .)
    RPAREN          reduce using rule 32 (term -> term TIMES factor .)


state 60

    (33) term -> term DIVIDE factor .

    TIMES           reduce using rule 33 (term -> term DIVIDE factor .)
    DIVIDE          reduce using rule 33 (term -> term DIVIDE factor .)
    SEMICOLON       reduce using rule 33 (term -> term DIVIDE factor .)
    PLUS            reduce using rule 33 (term -> term DIVIDE factor .)
    MINUS           reduce using rule 33 (term -> term DIVIDE factor .)
    GT              reduce using rule 33 (term -> term DIVIDE factor .)
    LT              reduce using rule 33 (term -> term DIVIDE factor .)
    GE              reduce using rule 33 (term -> term DIVIDE factor .)
    LE              reduce using rule 33 (term -> term DIVIDE factor .)
    EQ              reduce using rule 33 (term -> term DIVIDE factor .)
    NE              reduce using rule 33 (term -> term DIVIDE factor .)
    COMMA           reduce using rule 33 (term -> term DIVIDE factor .)
    RPAREN          reduce using rule 33 (term -> term DIVIDE factor .)


state 61

    (36) factor -> LPAREN expression RPAREN .

    TIMES           reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    GT              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    LT              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    GE              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    LE              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    EQ              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    NE              reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 36 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 36 (factor -> LPAREN expression RPAREN .)


state 62

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE . program RBRACE
    (16) if_statement -> IF LPAREN condition RPAREN LBRACE . program RBRACE ELSE LBRACE program RBRACE
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    program                        shift and go to state 73
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 63

    (22) condition -> expression GT expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 22 (condition -> expression GT expression .)
    SEMICOLON       reduce using rule 22 (condition -> expression GT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 64

    (23) condition -> expression LT expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 23 (condition -> expression LT expression .)
    SEMICOLON       reduce using rule 23 (condition -> expression LT expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 65

    (24) condition -> expression GE expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 24 (condition -> expression GE expression .)
    SEMICOLON       reduce using rule 24 (condition -> expression GE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 66

    (25) condition -> expression LE expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 25 (condition -> expression LE expression .)
    SEMICOLON       reduce using rule 25 (condition -> expression LE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 67

    (26) condition -> expression EQ expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 26 (condition -> expression EQ expression .)
    SEMICOLON       reduce using rule 26 (condition -> expression EQ expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 68

    (27) condition -> expression NE expression .
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          reduce using rule 27 (condition -> expression NE expression .)
    SEMICOLON       reduce using rule 27 (condition -> expression NE expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 69

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    program                        shift and go to state 74
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 70

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON . ID EQUALS expression RPAREN LBRACE program RBRACE

    ID              shift and go to state 75


state 71

    (19) print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .

    ID              reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    IF              reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    WHILE           reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    PRINT           reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    INT             reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    FLOAT           reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    $end            reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)
    RBRACE          reduce using rule 19 (print_statement -> PRINT LPAREN print_list RPAREN SEMICOLON .)


state 72

    (21) print_list -> expression COMMA print_list .

    RPAREN          reduce using rule 21 (print_list -> expression COMMA print_list .)


state 73

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE program . RBRACE
    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program . RBRACE ELSE LBRACE program RBRACE
    (2) program -> program . statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    RBRACE          shift and go to state 76
    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    statement                      shift and go to state 17
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 74

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE program . RBRACE
    (2) program -> program . statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    RBRACE          shift and go to state 77
    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    statement                      shift and go to state 17
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 75

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID . EQUALS expression RPAREN LBRACE program RBRACE

    EQUALS          shift and go to state 78


state 76

    (15) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .
    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE . ELSE LBRACE program RBRACE

    ID              reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    WHILE           reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    PRINT           reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    INT             reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    FLOAT           reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 15 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE .)
    ELSE            shift and go to state 79


state 77

    (17) while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .

    ID              reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    WHILE           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    PRINT           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    INT             reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    FLOAT           reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 17 (while_statement -> WHILE LPAREN condition RPAREN LBRACE program RBRACE .)


state 78

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS . expression RPAREN LBRACE program RBRACE
    (28) expression -> . term
    (29) expression -> . expression PLUS term
    (30) expression -> . expression MINUS term
    (31) term -> . factor
    (32) term -> . term TIMES factor
    (33) term -> . term DIVIDE factor
    (34) factor -> . NUMBER
    (35) factor -> . ID
    (36) factor -> . LPAREN expression RPAREN

    NUMBER          shift and go to state 31
    ID              shift and go to state 27
    LPAREN          shift and go to state 32

    expression                     shift and go to state 80
    term                           shift and go to state 29
    factor                         shift and go to state 30

state 79

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE . LBRACE program RBRACE

    LBRACE          shift and go to state 81


state 80

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression . RPAREN LBRACE program RBRACE
    (29) expression -> expression . PLUS term
    (30) expression -> expression . MINUS term

    RPAREN          shift and go to state 82
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42


state 81

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    program                        shift and go to state 83
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 82

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN . LBRACE program RBRACE

    LBRACE          shift and go to state 84


state 83

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program . RBRACE
    (2) program -> program . statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    RBRACE          shift and go to state 85
    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    statement                      shift and go to state 17
    declaration                    shift and go to state 3
    assignment                     shift and go to state 4
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 84

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE . program RBRACE
    (1) program -> . statement
    (2) program -> . program statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    assignment                     shift and go to state 4
    program                        shift and go to state 86
    statement                      shift and go to state 2
    declaration                    shift and go to state 3
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 85

    (16) if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .

    ID              reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    IF              reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    WHILE           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    FOR             reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    PRINT           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    INT             reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    FLOAT           reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    $end            reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)
    RBRACE          reduce using rule 16 (if_statement -> IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE .)


state 86

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program . RBRACE
    (2) program -> program . statement
    (3) statement -> . declaration
    (4) statement -> . assignment
    (5) statement -> . if_statement
    (6) statement -> . while_statement
    (7) statement -> . for_statement
    (8) statement -> . print_statement
    (9) declaration -> . type declaration_list SEMICOLON
    (14) assignment -> . ID EQUALS expression SEMICOLON
    (15) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE
    (16) if_statement -> . IF LPAREN condition RPAREN LBRACE program RBRACE ELSE LBRACE program RBRACE
    (17) while_statement -> . WHILE LPAREN condition RPAREN LBRACE program RBRACE
    (18) for_statement -> . FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE
    (19) print_statement -> . PRINT LPAREN print_list RPAREN SEMICOLON
    (12) type -> . INT
    (13) type -> . FLOAT

    RBRACE          shift and go to state 87
    ID              shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12
    FOR             shift and go to state 13
    PRINT           shift and go to state 14
    INT             shift and go to state 15
    FLOAT           shift and go to state 16

    assignment                     shift and go to state 4
    statement                      shift and go to state 17
    declaration                    shift and go to state 3
    if_statement                   shift and go to state 5
    while_statement                shift and go to state 6
    for_statement                  shift and go to state 7
    print_statement                shift and go to state 8
    type                           shift and go to state 9

state 87

    (18) for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .

    ID              reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    IF              reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    WHILE           reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    FOR             reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    PRINT           reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    INT             reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    FLOAT           reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    $end            reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)
    RBRACE          reduce using rule 18 (for_statement -> FOR LPAREN assignment condition SEMICOLON ID EQUALS expression RPAREN LBRACE program RBRACE .)

